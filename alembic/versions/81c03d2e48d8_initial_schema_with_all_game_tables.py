"""Initial schema with all game tables

Revision ID: 81c03d2e48d8
Revises:
Create Date: 2025-09-30 19:34:47.363795

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.orm import Session

from alembic import op

# Import seed data functions
from src.cataphract.models import seed_all_catalog_data

# revision identifiers, used by Alembic.
revision: str = "81c03d2e48d8"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:  # noqa: PLR0915
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "games",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("current_day", sa.Integer(), nullable=False),
        sa.Column("current_day_part", sa.String(), nullable=False),
        sa.Column("tick_schedule", sa.String(), nullable=False),
        sa.Column("map_width", sa.Integer(), nullable=False),
        sa.Column("map_height", sa.Integer(), nullable=False),
        sa.Column("season", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "current_day_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_games_current_day_part",
        ),
        sa.CheckConstraint(
            "season IN ('spring', 'summer', 'fall', 'winter')", name="ck_games_season"
        ),
        sa.CheckConstraint(
            "status IN ('setup', 'active', 'paused', 'completed')", name="ck_games_status"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "players",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.Column("is_referee", sa.Boolean(), nullable=False),
        sa.Column("last_login", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "ship_types",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("capacity_soldiers", sa.Integer(), nullable=False),
        sa.Column("capacity_cavalry", sa.Integer(), nullable=False),
        sa.Column("capacity_supplies", sa.Integer(), nullable=False),
        sa.Column("daily_cost_loot", sa.Integer(), nullable=False),
        sa.Column("can_sea", sa.Boolean(), nullable=False),
        sa.Column("can_river", sa.Boolean(), nullable=False),
        sa.Column("content_pack", sa.String(), nullable=True),
        sa.Column("special_rules", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "traits",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("scope_tags", sa.JSON(), nullable=False),
        sa.Column("effect_data", sa.JSON(), nullable=False),
        sa.Column("ruleset_version", sa.String(), nullable=False),
        sa.Column("content_pack", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index("idx_traits_content_pack", "traits", ["content_pack"], unique=False)
    op.create_table(
        "unit_types",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column("battle_multiplier", sa.Float(), nullable=False),
        sa.Column("supply_cost_per_day", sa.Integer(), nullable=False),
        sa.Column("can_travel_offroad", sa.Boolean(), nullable=False),
        sa.Column("special_abilities", sa.JSON(), nullable=True),
        sa.Column("content_pack", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "category IN ('infantry', 'cavalry', 'special', 'siege')", name="ck_unit_types_category"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index("idx_unit_types_content_pack", "unit_types", ["content_pack"], unique=False)
    op.create_table(
        "events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("game_day", sa.Integer(), nullable=False),
        sa.Column("game_part", sa.String(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("event_type", sa.String(), nullable=False),
        sa.Column("involved_entities", sa.JSON(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("details", sa.JSON(), nullable=True),
        sa.Column("rand_source", sa.JSON(), nullable=True),
        sa.Column("visible_to", sa.JSON(), nullable=False),
        sa.Column("referee_notes", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "event_type IN ('battle', 'siege_started', 'siege_ended', 'assault', 'stronghold_captured', 'movement', 'foraging', 'torching', 'morale_check', 'revolt', 'harry', 'army_split', 'army_merged', 'supplies_transferred', 'message_delivered', 'commander_captured', 'commander_died', 'operation_completed', 'weather_change')",
            name="ck_events_type",
        ),
        sa.CheckConstraint(
            "game_part IN ('morning', 'midday', 'evening', 'night')", name="ck_events_game_part"
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_events_game_time", "events", ["game_id", "game_day", "game_part"], unique=False
    )
    op.create_index("idx_events_type", "events", ["event_type"], unique=False)
    op.create_table(
        "factions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("color", sa.String(), nullable=False),
        sa.Column("special_rules", sa.JSON(), nullable=True),
        sa.Column("unique_units", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "name", name="uq_factions_game_name"),
    )
    op.create_table(
        "mercenary_companies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("base_rates", sa.JSON(), nullable=False),
        sa.Column("default_composition", sa.JSON(), nullable=False),
        sa.Column("available", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "name", name="uq_mercenary_companies_game_name"),
    )
    op.create_index(
        "idx_merc_companies_available", "mercenary_companies", ["available"], unique=False
    )
    op.create_index("idx_merc_companies_game", "mercenary_companies", ["game_id"], unique=False)
    op.create_table(
        "weather",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("game_day", sa.Integer(), nullable=False),
        sa.Column("weather_type", sa.String(), nullable=False),
        sa.Column("effects", sa.JSON(), nullable=False),
        sa.CheckConstraint(
            "weather_type IN ('clear', 'rain', 'snow', 'storm', 'fog', 'very_bad')",
            name="ck_weather_type",
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "game_day", name="uq_weather_game_day"),
    )
    op.create_index("idx_weather_day", "weather", ["game_id", "game_day"], unique=False)
    op.create_table(
        "faction_relations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("faction_id", sa.Integer(), nullable=False),
        sa.Column("other_faction_id", sa.Integer(), nullable=False),
        sa.Column("relation_type", sa.String(), nullable=False),
        sa.Column("since_day", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "relation_type IN ('allied', 'neutral', 'hostile')", name="ck_faction_relations_type"
        ),
        sa.ForeignKeyConstraint(
            ["faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["other_faction_id"],
            ["factions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("faction_id", "other_faction_id", name="uq_faction_relations"),
    )
    op.create_table(
        "hexes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("controlling_faction_id", sa.Integer(), nullable=True),
        sa.Column("q", sa.Integer(), nullable=False),
        sa.Column("r", sa.Integer(), nullable=False),
        sa.Column("terrain_type", sa.String(), nullable=False),
        sa.Column("is_good_country", sa.Boolean(), nullable=False),
        sa.Column("has_road", sa.Boolean(), nullable=False),
        sa.Column("settlement_score", sa.Integer(), nullable=True),
        sa.Column("river_sides", sa.JSON(), nullable=True),
        sa.Column("foraging_times_remaining", sa.Integer(), nullable=False),
        sa.Column("is_torched", sa.Boolean(), nullable=False),
        sa.Column("last_foraged_day", sa.Integer(), nullable=True),
        sa.Column("last_recruited_day", sa.Integer(), nullable=True),
        sa.Column("last_torched_day", sa.Integer(), nullable=True),
        sa.Column("last_control_change_day", sa.Integer(), nullable=True),
        sa.CheckConstraint(
            "terrain_type IN ('flatland', 'hills', 'forest', 'mountain', 'water', 'coast')",
            name="ck_hexes_terrain_type",
        ),
        sa.CheckConstraint(
            "settlement_score IS NULL OR settlement_score IN (0, 20, 40, 60, 80, 100)",
            name="ck_hexes_settlement_score",
        ),
        sa.ForeignKeyConstraint(
            ["controlling_faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "q", "r", name="uq_hexes_game_coords"),
    )
    op.create_index("idx_hexes_control", "hexes", ["controlling_faction_id"], unique=False)
    op.create_index("idx_hexes_coords", "hexes", ["game_id", "q", "r"], unique=False)
    op.create_index("idx_hexes_game", "hexes", ["game_id"], unique=False)
    op.create_table(
        "battles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.Column("hex_id", sa.Integer(), nullable=False),
        sa.Column("game_day", sa.Integer(), nullable=False),
        sa.Column("battle_type", sa.String(), nullable=False),
        sa.Column("attacker_side", sa.JSON(), nullable=False),
        sa.Column("defender_side", sa.JSON(), nullable=False),
        sa.Column("attacker_rolls", sa.JSON(), nullable=False),
        sa.Column("defender_rolls", sa.JSON(), nullable=False),
        sa.Column("victor_side", sa.String(), nullable=False),
        sa.Column("roll_difference", sa.Integer(), nullable=False),
        sa.Column("casualties", sa.JSON(), nullable=False),
        sa.Column("morale_changes", sa.JSON(), nullable=False),
        sa.Column("commanders_captured", sa.JSON(), nullable=True),
        sa.Column("loot_captured", sa.Integer(), nullable=False),
        sa.Column("routed_armies", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint("battle_type IN ('field', 'assault', 'naval')", name="ck_battles_type"),
        sa.CheckConstraint("victor_side IN ('attacker', 'defender')", name="ck_battles_victor"),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["hex_id"],
            ["hexes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_battles_day", "battles", ["game_id", "game_day"], unique=False)
    op.create_index("idx_battles_hex", "battles", ["hex_id"], unique=False)
    op.create_table(
        "commanders",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=True),
        sa.Column("faction_id", sa.Integer(), nullable=False),
        sa.Column("related_to_commander_id", sa.Integer(), nullable=True),
        sa.Column("current_hex_id", sa.Integer(), nullable=True),
        sa.Column("captured_by_faction_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column("relationship_type", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint("status IN ('active', 'captured', 'dead')", name="ck_commanders_status"),
        sa.CheckConstraint("age >= 14", name="ck_commanders_age"),
        sa.ForeignKeyConstraint(
            ["captured_by_faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["current_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["players.id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_to_commander_id"],
            ["commanders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_commanders_faction", "commanders", ["faction_id"], unique=False)
    op.create_index("idx_commanders_player", "commanders", ["player_id"], unique=False)
    op.create_table(
        "river_crossings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("from_hex_id", sa.Integer(), nullable=False),
        sa.Column("to_hex_id", sa.Integer(), nullable=False),
        sa.Column("side", sa.String(), nullable=True),
        sa.Column("crossing_type", sa.String(), nullable=False),
        sa.Column("bridge_capacity", sa.Integer(), nullable=True),
        sa.Column("ford_quality", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("seasonal_closures", sa.JSON(), nullable=True),
        sa.Column("hazard_rules", sa.JSON(), nullable=True),
        sa.Column("destroyed_on_day", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "crossing_type IN ('bridge', 'ford', 'none')", name="ck_river_crossings_type"
        ),
        sa.CheckConstraint(
            "ford_quality IS NULL OR ford_quality IN ('easy', 'difficult', 'impassable')",
            name="ck_river_crossings_ford_quality",
        ),
        sa.CheckConstraint(
            "side IS NULL OR side IN ('NE', 'E', 'SE', 'SW', 'W', 'NW')",
            name="ck_river_crossings_side",
        ),
        sa.CheckConstraint(
            "status IN ('open', 'closed', 'destroyed')", name="ck_river_crossings_status"
        ),
        sa.CheckConstraint("from_hex_id < to_hex_id", name="ck_river_crossings_order"),
        sa.ForeignKeyConstraint(
            ["from_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_hex_id"],
            ["hexes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "from_hex_id", "to_hex_id", name="uq_river_crossings"),
    )
    op.create_index(
        "idx_river_crossings_edge", "river_crossings", ["from_hex_id", "to_hex_id"], unique=False
    )
    op.create_index("idx_river_crossings_status", "river_crossings", ["status"], unique=False)
    op.create_table(
        "road_edges",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("from_hex_id", sa.Integer(), nullable=False),
        sa.Column("to_hex_id", sa.Integer(), nullable=False),
        sa.Column("road_quality", sa.String(), nullable=False),
        sa.Column("base_cost_hours", sa.Float(), nullable=False),
        sa.Column("seasonal_modifiers", sa.JSON(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("damaged_since_day", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "road_quality IN ('major', 'minor', 'trail')", name="ck_road_edges_quality"
        ),
        sa.CheckConstraint("status IN ('open', 'closed', 'damaged')", name="ck_road_edges_status"),
        sa.ForeignKeyConstraint(
            ["from_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_hex_id"],
            ["hexes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "from_hex_id", "to_hex_id", name="uq_road_edges"),
    )
    op.create_index("idx_road_edges_from", "road_edges", ["from_hex_id"], unique=False)
    op.create_index("idx_road_edges_status", "road_edges", ["status"], unique=False)
    op.create_index("idx_road_edges_to", "road_edges", ["to_hex_id"], unique=False)
    op.create_table(
        "strongholds",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("hex_id", sa.Integer(), nullable=False),
        sa.Column("controlling_faction_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("defensive_bonus", sa.Integer(), nullable=False),
        sa.Column("base_threshold", sa.Integer(), nullable=False),
        sa.Column("current_threshold", sa.Integer(), nullable=False),
        sa.Column("gates_open", sa.Boolean(), nullable=False),
        sa.Column("supplies_held", sa.Integer(), nullable=False),
        sa.Column("loot_held", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint("type IN ('town', 'city', 'fortress')", name="ck_strongholds_type"),
        sa.ForeignKeyConstraint(
            ["controlling_faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["hex_id"],
            ["hexes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "name", name="uq_strongholds_game_name"),
    )
    op.create_index(
        "idx_strongholds_faction", "strongholds", ["controlling_faction_id"], unique=False
    )
    op.create_index("idx_strongholds_hex", "strongholds", ["hex_id"], unique=False)
    op.create_table(
        "armies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("commander_id", sa.Integer(), nullable=False),
        sa.Column("current_hex_id", sa.Integer(), nullable=False),
        sa.Column("destination_hex_id", sa.Integer(), nullable=True),
        sa.Column("rest_location_stronghold_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("movement_points_remaining", sa.Float(), nullable=False),
        sa.Column("morale_current", sa.Integer(), nullable=False),
        sa.Column("morale_resting", sa.Integer(), nullable=False),
        sa.Column("morale_max", sa.Integer(), nullable=False),
        sa.Column("supplies_current", sa.Integer(), nullable=False),
        sa.Column("supplies_capacity", sa.Integer(), nullable=False),
        sa.Column("daily_consumption", sa.Integer(), nullable=False),
        sa.Column("loot_carried", sa.Integer(), nullable=False),
        sa.Column("noncombatant_count", sa.Integer(), nullable=False),
        sa.Column("noncombatant_percentage", sa.Float(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("forced_march_weeks", sa.Float(), nullable=False),
        sa.Column("days_without_supplies", sa.Integer(), nullable=False),
        sa.Column("days_marched_this_week", sa.Integer(), nullable=False),
        sa.Column("status_effects", sa.JSON(), nullable=True),
        sa.Column("column_length_miles", sa.Float(), nullable=False),
        sa.Column("rest_duration_days", sa.Integer(), nullable=True),
        sa.Column("rest_started_day", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('idle', 'marching', 'forced_march', 'night_march', 'resting', 'foraging', 'besieging', 'in_battle', 'routed', 'garrisoned')",
            name="ck_armies_status",
        ),
        sa.ForeignKeyConstraint(
            ["commander_id"],
            ["commanders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["current_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["destination_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["rest_location_stronghold_id"],
            ["strongholds.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_armies_commander", "armies", ["commander_id"], unique=False)
    op.create_index("idx_armies_hex", "armies", ["current_hex_id"], unique=False)
    op.create_index("idx_armies_status", "armies", ["status"], unique=False)
    op.create_table(
        "commander_traits",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("commander_id", sa.Integer(), nullable=False),
        sa.Column("trait_id", sa.Integer(), nullable=False),
        sa.Column("acquired_at_age", sa.Integer(), nullable=False),
        sa.Column("instance_data", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["commander_id"],
            ["commanders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["trait_id"],
            ["traits.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("commander_id", "trait_id", name="uq_commander_traits"),
    )
    op.create_index(
        "idx_commander_traits_commander", "commander_traits", ["commander_id"], unique=False
    )
    op.create_index("idx_commander_traits_trait", "commander_traits", ["trait_id"], unique=False)
    op.create_table(
        "commander_visibility",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("commander_id", sa.Integer(), nullable=False),
        sa.Column("game_day", sa.Integer(), nullable=False),
        sa.Column("game_part", sa.String(), nullable=False),
        sa.Column("visible_hex_ids", sa.JSON(), nullable=False),
        sa.Column("discovered_hexes", sa.JSON(), nullable=True),
        sa.Column("known_armies", sa.JSON(), nullable=True),
        sa.Column("known_strongholds", sa.JSON(), nullable=True),
        sa.Column("last_updated_timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint(
            "game_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_commander_visibility_game_part",
        ),
        sa.ForeignKeyConstraint(
            ["commander_id"],
            ["commanders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "commander_id", "game_day", "game_part", name="uq_commander_visibility"
        ),
    )
    op.create_index(
        "idx_visibility_commander", "commander_visibility", ["commander_id"], unique=False
    )
    op.create_index(
        "idx_visibility_lookup",
        "commander_visibility",
        ["commander_id", "game_day", "game_part"],
        unique=False,
    )
    op.create_table(
        "map_features",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("hex_id", sa.Integer(), nullable=True),
        sa.Column("from_hex_id", sa.Integer(), nullable=True),
        sa.Column("to_hex_id", sa.Integer(), nullable=True),
        sa.Column("stronghold_id", sa.Integer(), nullable=True),
        sa.Column("scope", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("effect_data", sa.JSON(), nullable=False),
        sa.Column("content_pack", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint("scope IN ('hex', 'edge', 'stronghold')", name="ck_map_features_scope"),
        sa.ForeignKeyConstraint(
            ["from_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["stronghold_id"],
            ["strongholds.id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_hex_id"],
            ["hexes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_map_features_edge", "map_features", ["from_hex_id", "to_hex_id"], unique=False
    )
    op.create_index("idx_map_features_hex", "map_features", ["hex_id"], unique=False)
    op.create_index("idx_map_features_scope", "map_features", ["scope"], unique=False)
    op.create_index("idx_map_features_stronghold", "map_features", ["stronghold_id"], unique=False)
    op.create_table(
        "messages",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("sender_commander_id", sa.Integer(), nullable=False),
        sa.Column("recipient_commander_id", sa.Integer(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("sent_at_day", sa.Integer(), nullable=False),
        sa.Column("sent_at_part", sa.String(), nullable=False),
        sa.Column("sent_at_timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("delivered_at_day", sa.Integer(), nullable=True),
        sa.Column("delivered_at_part", sa.String(), nullable=True),
        sa.Column("delivered_at_timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.Column("route_legs", sa.JSON(), nullable=False),
        sa.Column("delivery_success_roll", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "delivered_at_part IS NULL OR delivered_at_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_messages_delivered_at_part",
        ),
        sa.CheckConstraint(
            "sent_at_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_messages_sent_at_part",
        ),
        sa.CheckConstraint(
            "status IN ('in_transit', 'delivered', 'intercepted', 'failed')",
            name="ck_messages_status",
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["recipient_commander_id"],
            ["commanders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_commander_id"],
            ["commanders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_messages_delivery", "messages", ["delivered_at_day", "delivered_at_part"], unique=False
    )
    op.create_index("idx_messages_recipient", "messages", ["recipient_commander_id"], unique=False)
    op.create_index("idx_messages_sender", "messages", ["sender_commander_id"], unique=False)
    op.create_index("idx_messages_status", "messages", ["status"], unique=False)
    op.create_table(
        "operations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("commander_id", sa.Integer(), nullable=False),
        sa.Column("operation_type", sa.String(), nullable=False),
        sa.Column("target_type", sa.String(), nullable=False),
        sa.Column("target_id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("loot_cost", sa.Integer(), nullable=False),
        sa.Column("complexity", sa.String(), nullable=False),
        sa.Column("success_target", sa.Integer(), nullable=False),
        sa.Column("roll_result", sa.Integer(), nullable=True),
        sa.Column("success", sa.Boolean(), nullable=True),
        sa.Column("result_details", sa.JSON(), nullable=True),
        sa.Column("commissioned_on_day", sa.Integer(), nullable=False),
        sa.Column("executed_on_day", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "complexity IN ('simple', 'moderate', 'complex')", name="ck_operations_complexity"
        ),
        sa.ForeignKeyConstraint(
            ["commander_id"],
            ["commanders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_operations_commander", "operations", ["commander_id"], unique=False)
    op.create_index("idx_operations_status", "operations", ["executed_on_day"], unique=False)
    op.create_table(
        "crossing_queues",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("crossing_id", sa.Integer(), nullable=False),
        sa.Column("army_id", sa.Integer(), nullable=False),
        sa.Column("pending_miles", sa.Float(), nullable=False),
        sa.Column("enqueued_day", sa.Integer(), nullable=False),
        sa.Column("enqueued_part", sa.String(), nullable=False),
        sa.Column("crossing_start_day", sa.Integer(), nullable=True),
        sa.Column("crossing_start_part", sa.String(), nullable=True),
        sa.Column("expected_completion_day", sa.Integer(), nullable=True),
        sa.Column("expected_completion_part", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "crossing_start_part IS NULL OR crossing_start_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_crossing_queues_start_part",
        ),
        sa.CheckConstraint(
            "enqueued_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_crossing_queues_enqueued_part",
        ),
        sa.CheckConstraint(
            "expected_completion_part IS NULL OR expected_completion_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_crossing_queues_completion_part",
        ),
        sa.CheckConstraint(
            "status IN ('waiting', 'crossing', 'completed', 'interrupted')",
            name="ck_crossing_queues_status",
        ),
        sa.ForeignKeyConstraint(["army_id"], ["armies.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["crossing_id"], ["river_crossings.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("crossing_id", "army_id", name="uq_crossing_queues"),
    )
    op.create_index("idx_crossing_queues_army", "crossing_queues", ["army_id"], unique=False)
    op.create_index(
        "idx_crossing_queues_crossing", "crossing_queues", ["crossing_id"], unique=False
    )
    op.create_index("idx_crossing_queues_status", "crossing_queues", ["status"], unique=False)
    op.create_table(
        "detachments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("army_id", sa.Integer(), nullable=False),
        sa.Column("unit_type_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("soldier_count", sa.Integer(), nullable=False),
        sa.Column("wagon_count", sa.Integer(), nullable=False),
        sa.Column("engine_count", sa.Integer(), nullable=True),
        sa.Column("region_of_origin", sa.String(), nullable=True),
        sa.Column("formation_position", sa.Integer(), nullable=False),
        sa.Column("honors", sa.JSON(), nullable=True),
        sa.Column("instance_data", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["army_id"],
            ["armies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unit_type_id"],
            ["unit_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_detachments_army", "detachments", ["army_id"], unique=False)
    op.create_index("idx_detachments_unit_type", "detachments", ["unit_type_id"], unique=False)
    op.create_table(
        "mercenary_contracts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("company_id", sa.Integer(), nullable=False),
        sa.Column("commander_id", sa.Integer(), nullable=False),
        sa.Column("army_id", sa.Integer(), nullable=True),
        sa.Column("start_day", sa.Integer(), nullable=False),
        sa.Column("end_day", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("last_upkeep_day", sa.Integer(), nullable=True),
        sa.Column("negotiated_rates", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('active', 'paused', 'unpaid', 'terminated', 'completed')",
            name="ck_mercenary_contracts_status",
        ),
        sa.ForeignKeyConstraint(
            ["army_id"],
            ["armies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["commander_id"],
            ["commanders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["mercenary_companies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_merc_contracts_commander", "mercenary_contracts", ["commander_id"], unique=False
    )
    op.create_index("idx_merc_contracts_game", "mercenary_contracts", ["game_id"], unique=False)
    op.create_index("idx_merc_contracts_status", "mercenary_contracts", ["status"], unique=False)
    op.create_table(
        "message_legs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("message_id", sa.Integer(), nullable=False),
        sa.Column("from_hex_id", sa.Integer(), nullable=False),
        sa.Column("to_hex_id", sa.Integer(), nullable=False),
        sa.Column("seq", sa.Integer(), nullable=False),
        sa.Column("control", sa.String(), nullable=False),
        sa.Column("miles", sa.Float(), nullable=False),
        sa.Column("road", sa.Boolean(), nullable=False),
        sa.Column("risk", sa.Float(), nullable=False),
        sa.Column("eta_day", sa.Integer(), nullable=True),
        sa.Column("eta_part", sa.String(), nullable=True),
        sa.Column("control_snapshot_day", sa.Integer(), nullable=True),
        sa.Column("control_snapshot_part", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "control IN ('friendly', 'neutral', 'hostile')", name="ck_message_legs_control"
        ),
        sa.CheckConstraint(
            "control_snapshot_part IS NULL OR control_snapshot_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_message_legs_snapshot_part",
        ),
        sa.CheckConstraint(
            "eta_part IS NULL OR eta_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_message_legs_eta_part",
        ),
        sa.ForeignKeyConstraint(
            ["from_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(["message_id"], ["messages.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["to_hex_id"],
            ["hexes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("message_id", "seq", name="uq_message_legs"),
    )
    op.create_index(
        "idx_message_legs_edge", "message_legs", ["from_hex_id", "to_hex_id"], unique=False
    )
    op.create_index("idx_message_legs_eta", "message_legs", ["eta_day", "eta_part"], unique=False)
    op.create_index("idx_message_legs_message", "message_legs", ["message_id"], unique=False)
    op.create_table(
        "orders",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("commander_id", sa.Integer(), nullable=False),
        sa.Column("army_id", sa.Integer(), nullable=False),
        sa.Column("order_type", sa.String(), nullable=False),
        sa.Column("parameters", sa.JSON(), nullable=False),
        sa.Column("issued_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("execute_at_day", sa.Integer(), nullable=False),
        sa.Column("execute_at_part", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("result", sa.JSON(), nullable=True),
        sa.Column("executed_at_day", sa.Integer(), nullable=True),
        sa.Column("executed_at_part", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "execute_at_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_orders_execute_at_part",
        ),
        sa.CheckConstraint(
            "executed_at_part IS NULL OR executed_at_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_orders_executed_at_part",
        ),
        sa.CheckConstraint(
            "order_type IN ('move', 'forced_march', 'night_march', 'rest', 'forage', 'torch', 'besiege', 'assault', 'harry', 'transfer_supplies', 'give_loot', 'embark', 'disembark', 'split_army', 'garrison', 'ungarrison')",
            name="ck_orders_type",
        ),
        sa.CheckConstraint(
            "status IN ('pending', 'executing', 'completed', 'cancelled', 'failed')",
            name="ck_orders_status",
        ),
        sa.ForeignKeyConstraint(
            ["army_id"],
            ["armies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["commander_id"],
            ["commanders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_orders_army", "orders", ["army_id"], unique=False)
    op.create_index(
        "idx_orders_execute_time", "orders", ["execute_at_day", "execute_at_part"], unique=False
    )
    op.create_index("idx_orders_status", "orders", ["status"], unique=False)
    op.create_table(
        "orders_log_entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("related_event_id", sa.Integer(), nullable=True),
        sa.Column("related_commander_id", sa.Integer(), nullable=True),
        sa.Column("related_message_id", sa.Integer(), nullable=True),
        sa.Column("game_day", sa.Integer(), nullable=False),
        sa.Column("game_part", sa.String(), nullable=False),
        sa.Column("entry_type", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("priority", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("processed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "entry_type IN ('notice', 'delivery', 'completion', 'event', 'sighting')",
            name="ck_orders_log_entries_type",
        ),
        sa.CheckConstraint(
            "game_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_orders_log_entries_game_part",
        ),
        sa.CheckConstraint(
            "priority IN ('low', 'normal', 'high', 'urgent')", name="ck_orders_log_entries_priority"
        ),
        sa.CheckConstraint(
            "status IN ('pending', 'sent', 'deferred', 'skipped')",
            name="ck_orders_log_entries_status",
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_commander_id"],
            ["commanders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_event_id"],
            ["events.id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_message_id"],
            ["messages.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_orders_log_commander", "orders_log_entries", ["related_commander_id"], unique=False
    )
    op.create_index("idx_orders_log_status", "orders_log_entries", ["status"], unique=False)
    op.create_index(
        "idx_orders_log_time",
        "orders_log_entries",
        ["game_id", "game_day", "game_part"],
        unique=False,
    )
    op.create_table(
        "ships",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("controlling_faction_id", sa.Integer(), nullable=False),
        sa.Column("current_hex_id", sa.Integer(), nullable=False),
        sa.Column("ship_type_id", sa.Integer(), nullable=False),
        sa.Column("embarked_army_id", sa.Integer(), nullable=True),
        sa.Column("has_siege_equipment", sa.Boolean(), nullable=False),
        sa.Column("morale", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("return_day", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('available', 'transporting', 'fled')", name="ck_ships_status"
        ),
        sa.ForeignKeyConstraint(
            ["controlling_faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["current_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["embarked_army_id"],
            ["armies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ship_type_id"],
            ["ship_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_ships_army", "ships", ["embarked_army_id"], unique=False)
    op.create_index("idx_ships_hex", "ships", ["current_hex_id"], unique=False)
    op.create_table(
        "sieges",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("stronghold_id", sa.Integer(), nullable=False),
        sa.Column("defender_army_id", sa.Integer(), nullable=True),
        sa.Column("attacker_armies", sa.JSON(), nullable=False),
        sa.Column("started_on_day", sa.Integer(), nullable=False),
        sa.Column("weeks_elapsed", sa.Integer(), nullable=False),
        sa.Column("current_threshold", sa.Integer(), nullable=False),
        sa.Column("threshold_modifiers", sa.JSON(), nullable=False),
        sa.Column("siege_engines_count", sa.Integer(), nullable=False),
        sa.Column("assault_attempts", sa.JSON(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("ended_on_day", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('ongoing', 'gates_opened', 'captured', 'lifted')", name="ck_sieges_status"
        ),
        sa.ForeignKeyConstraint(
            ["defender_army_id"],
            ["armies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
        ),
        sa.ForeignKeyConstraint(
            ["stronghold_id"],
            ["strongholds.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_sieges_status", "sieges", ["status"], unique=False)
    op.create_index("idx_sieges_stronghold", "sieges", ["stronghold_id"], unique=False)
    op.create_table(
        "movement_legs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("army_id", sa.Integer(), nullable=False),
        sa.Column("order_id", sa.Integer(), nullable=False),
        sa.Column("from_hex_id", sa.Integer(), nullable=False),
        sa.Column("to_hex_id", sa.Integer(), nullable=False),
        sa.Column("seq", sa.Integer(), nullable=False),
        sa.Column("road", sa.Boolean(), nullable=False),
        sa.Column("distance_miles", sa.Float(), nullable=False),
        sa.Column("base_travel_time_hours", sa.Float(), nullable=False),
        sa.Column("planned_start_day", sa.Integer(), nullable=False),
        sa.Column("planned_start_part", sa.String(), nullable=False),
        sa.Column("planned_end_day", sa.Integer(), nullable=False),
        sa.Column("planned_end_part", sa.String(), nullable=False),
        sa.Column("actual_end_day", sa.Integer(), nullable=True),
        sa.Column("actual_end_part", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("interruption_reason", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "actual_end_part IS NULL OR actual_end_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_movement_legs_actual_end_part",
        ),
        sa.CheckConstraint(
            "planned_end_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_movement_legs_planned_end_part",
        ),
        sa.CheckConstraint(
            "planned_start_part IN ('morning', 'midday', 'evening', 'night')",
            name="ck_movement_legs_planned_start_part",
        ),
        sa.CheckConstraint(
            "status IN ('pending', 'in_progress', 'completed', 'interrupted', 'cancelled')",
            name="ck_movement_legs_status",
        ),
        sa.ForeignKeyConstraint(["army_id"], ["armies.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["from_hex_id"],
            ["hexes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_hex_id"],
            ["hexes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("army_id", "order_id", "seq", name="uq_movement_legs"),
    )
    op.create_index("idx_movement_legs_army", "movement_legs", ["army_id"], unique=False)
    op.create_index(
        "idx_movement_legs_edge", "movement_legs", ["from_hex_id", "to_hex_id"], unique=False
    )
    op.create_index("idx_movement_legs_order", "movement_legs", ["order_id"], unique=False)
    op.create_index("idx_movement_legs_status", "movement_legs", ["status"], unique=False)
    # ### end Alembic commands ###

    # Seed catalog data (traits and unit_types)
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        seed_all_catalog_data(session)
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()


def downgrade() -> None:  # noqa: PLR0915
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_movement_legs_status", table_name="movement_legs")
    op.drop_index("idx_movement_legs_order", table_name="movement_legs")
    op.drop_index("idx_movement_legs_edge", table_name="movement_legs")
    op.drop_index("idx_movement_legs_army", table_name="movement_legs")
    op.drop_table("movement_legs")
    op.drop_index("idx_sieges_stronghold", table_name="sieges")
    op.drop_index("idx_sieges_status", table_name="sieges")
    op.drop_table("sieges")
    op.drop_index("idx_ships_hex", table_name="ships")
    op.drop_index("idx_ships_army", table_name="ships")
    op.drop_table("ships")
    op.drop_index("idx_orders_log_time", table_name="orders_log_entries")
    op.drop_index("idx_orders_log_status", table_name="orders_log_entries")
    op.drop_index("idx_orders_log_commander", table_name="orders_log_entries")
    op.drop_table("orders_log_entries")
    op.drop_index("idx_orders_status", table_name="orders")
    op.drop_index("idx_orders_execute_time", table_name="orders")
    op.drop_index("idx_orders_army", table_name="orders")
    op.drop_table("orders")
    op.drop_index("idx_message_legs_message", table_name="message_legs")
    op.drop_index("idx_message_legs_eta", table_name="message_legs")
    op.drop_index("idx_message_legs_edge", table_name="message_legs")
    op.drop_table("message_legs")
    op.drop_index("idx_merc_contracts_status", table_name="mercenary_contracts")
    op.drop_index("idx_merc_contracts_game", table_name="mercenary_contracts")
    op.drop_index("idx_merc_contracts_commander", table_name="mercenary_contracts")
    op.drop_table("mercenary_contracts")
    op.drop_index("idx_detachments_unit_type", table_name="detachments")
    op.drop_index("idx_detachments_army", table_name="detachments")
    op.drop_table("detachments")
    op.drop_index("idx_crossing_queues_status", table_name="crossing_queues")
    op.drop_index("idx_crossing_queues_crossing", table_name="crossing_queues")
    op.drop_index("idx_crossing_queues_army", table_name="crossing_queues")
    op.drop_table("crossing_queues")
    op.drop_index("idx_operations_status", table_name="operations")
    op.drop_index("idx_operations_commander", table_name="operations")
    op.drop_table("operations")
    op.drop_index("idx_messages_status", table_name="messages")
    op.drop_index("idx_messages_sender", table_name="messages")
    op.drop_index("idx_messages_recipient", table_name="messages")
    op.drop_index("idx_messages_delivery", table_name="messages")
    op.drop_table("messages")
    op.drop_index("idx_map_features_stronghold", table_name="map_features")
    op.drop_index("idx_map_features_scope", table_name="map_features")
    op.drop_index("idx_map_features_hex", table_name="map_features")
    op.drop_index("idx_map_features_edge", table_name="map_features")
    op.drop_table("map_features")
    op.drop_index("idx_visibility_lookup", table_name="commander_visibility")
    op.drop_index("idx_visibility_commander", table_name="commander_visibility")
    op.drop_table("commander_visibility")
    op.drop_index("idx_commander_traits_trait", table_name="commander_traits")
    op.drop_index("idx_commander_traits_commander", table_name="commander_traits")
    op.drop_table("commander_traits")
    op.drop_index("idx_armies_status", table_name="armies")
    op.drop_index("idx_armies_hex", table_name="armies")
    op.drop_index("idx_armies_commander", table_name="armies")
    op.drop_table("armies")
    op.drop_index("idx_strongholds_hex", table_name="strongholds")
    op.drop_index("idx_strongholds_faction", table_name="strongholds")
    op.drop_table("strongholds")
    op.drop_index("idx_road_edges_to", table_name="road_edges")
    op.drop_index("idx_road_edges_status", table_name="road_edges")
    op.drop_index("idx_road_edges_from", table_name="road_edges")
    op.drop_table("road_edges")
    op.drop_index("idx_river_crossings_status", table_name="river_crossings")
    op.drop_index("idx_river_crossings_edge", table_name="river_crossings")
    op.drop_table("river_crossings")
    op.drop_index("idx_commanders_player", table_name="commanders")
    op.drop_index("idx_commanders_faction", table_name="commanders")
    op.drop_table("commanders")
    op.drop_index("idx_battles_hex", table_name="battles")
    op.drop_index("idx_battles_day", table_name="battles")
    op.drop_table("battles")
    op.drop_index("idx_hexes_game", table_name="hexes")
    op.drop_index("idx_hexes_coords", table_name="hexes")
    op.drop_index("idx_hexes_control", table_name="hexes")
    op.drop_table("hexes")
    op.drop_table("faction_relations")
    op.drop_index("idx_weather_day", table_name="weather")
    op.drop_table("weather")
    op.drop_index("idx_merc_companies_game", table_name="mercenary_companies")
    op.drop_index("idx_merc_companies_available", table_name="mercenary_companies")
    op.drop_table("mercenary_companies")
    op.drop_table("factions")
    op.drop_index("idx_events_type", table_name="events")
    op.drop_index("idx_events_game_time", table_name="events")
    op.drop_table("events")
    op.drop_index("idx_unit_types_content_pack", table_name="unit_types")
    op.drop_table("unit_types")
    op.drop_index("idx_traits_content_pack", table_name="traits")
    op.drop_table("traits")
    op.drop_table("ship_types")
    op.drop_table("players")
    op.drop_table("games")
    # ### end Alembic commands ###
